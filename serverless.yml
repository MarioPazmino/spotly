# org: mariora
app: alquiler-canchas-api
service: alquiler-canchas-api
# Variables comunes para reutilización
custom:
  stage: ${opt:stage, 'dev'}
  tablePrefix: -${self:custom.stage}
  domain: tucanchasdeportivas.com
  cognitoGroups:
    superAdmin: super_admin
    adminCentro: admin_centro
    cliente: cliente
  commonEnvVars:
    STAGE: ${self:custom.stage}
    RESERVAS_TABLE: Reservas${self:custom.tablePrefix}
    CENTROS_DEPORTIVOS_TABLE: CentrosDeportivos${self:custom.tablePrefix}
    CANCHAS_TABLE: Canchas${self:custom.tablePrefix}
    USUARIOS_TABLE: Usuarios${self:custom.tablePrefix}
    SCHEDULES_TABLE: Horarios${self:custom.tablePrefix}
    PAGOS_TABLE: Pagos${self:custom.tablePrefix}
    RESENAS_TABLE: Resenas${self:custom.tablePrefix}
    CUPONES_DESCUENTO_TABLE: CuponesDescuento${self:custom.tablePrefix}
    COGNITO_USER_POOL_ID: !Ref CognitoUserPool
    COGNITO_WEB_CLIENT_ID: !Ref CognitoUserPoolWebClient
    COGNITO_MOBILE_CLIENT_ID: !Ref CognitoUserPoolMobileClient
    SUPER_ADMIN_GROUP_NAME: ${self:custom.cognitoGroups.superAdmin}
    ADMIN_CENTRO_GROUP_NAME: ${self:custom.cognitoGroups.adminCentro}
    CLIENTE_GROUP_NAME: ${self:custom.cognitoGroups.cliente}
    AWS_REGION: us-east-1
    ADMIN_DOMAINS: "${self:custom.domain}"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NOTIFICATIONS_TOPIC_ARN: !Ref NotificationsTopic
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            # Recursos para tabla CentrosDeportivos
            - !GetAtt CentrosDeportivosTable.Arn
            - !Join ["", [!GetAtt CentrosDeportivosTable.Arn, "/*"]]
            - !Join ["", [!GetAtt CentrosDeportivosTable.Arn, "/index/UserIdIndex"]]
            - !Join ["", [!GetAtt CentrosDeportivosTable.Arn, "/index/HoraAperturaMinimaIndex"]]
            - !Join ["", [!GetAtt CentrosDeportivosTable.Arn, "/index/HoraCierreMaximaIndex"]]
            # Recursos para tabla Canchas
            - !GetAtt CanchasTable.Arn
            - !Join ["", [!GetAtt CanchasTable.Arn, "/*"]]
            # Recursos para tabla Usuarios
            - !GetAtt UsuariosTable.Arn  
            - !Join ["", [!GetAtt UsuariosTable.Arn, "/index/EmailIndex"]]
            - !Join ["", [!GetAtt UsuariosTable.Arn, "/index/PendienteAprobacionIndex"]]
            # Recursos para tabla Horarios
            - !GetAtt HorariosTable.Arn
            - !Join ["", [!GetAtt HorariosTable.Arn, "/*"]]
            - !Join ["", [!GetAtt HorariosTable.Arn, "/index/CanchaFechaIndex"]]
            - !Join ["", [!GetAtt HorariosTable.Arn, "/index/ReservaIdIndex"]]
            # Recursos para tabla Reservas
            - !GetAtt ReservasTable.Arn
            - !Join ["", [!GetAtt ReservasTable.Arn, "/*"]]
            - !Join ["", [!GetAtt ReservasTable.Arn, "/index/CanchaFechaIndex"]]
            - !Join ["", [!GetAtt ReservasTable.Arn, "/index/UserIdIndex"]]
            # Recursos para tabla Pagos
            - !GetAtt PagosTable.Arn
            - !Join ["", [!GetAtt PagosTable.Arn, "/*"]]
            - !Join ["", [!GetAtt PagosTable.Arn, "/index/ReservaIdIndex"]]
            - !Join ["", [!GetAtt PagosTable.Arn, "/index/UserIdIndex"]]
            - !Join ["", [!GetAtt PagosTable.Arn, "/index/CentroIdIndex"]]
            - !Join ["", [!GetAtt PagosTable.Arn, "/index/TransactionIdIndex"]]
            # Recursos para tabla Reseñas
            - !GetAtt ResenasTable.Arn
            - !Join ["", [!GetAtt ResenasTable.Arn, "/index/*"]]
            # Recursos para tabla CuponDescuento
            - !GetAtt CuponesDescuentoTable.Arn
            - !Join ["", [!GetAtt CuponesDescuentoTable.Arn, "/*"]]
            - !Join ["", [!GetAtt CuponesDescuentoTable.Arn, "/index/CentroIdIndex"]]
        - Effect: Allow
          Action:
            - sns:Publish
            - sns:Subscribe
            - sns:Unsubscribe
            - sns:CreateTopic
            - sns:DeleteTopic
            - sns:SetTopicAttributes
            - sns:GetTopicAttributes
            - sns:ListSubscriptionsByTopic
          Resource: !Ref NotificationsTopic

functions:
  api:
    handler: handler.api
    events:
      - httpApi:
          path: /{proxy+}
          method: ANY
  cleanupOrphanImages:
    handler: scripts/cleanupOrphanImagesLambda.handler
    memorySize: 512
    timeout: 900 # 15 minutos máximo para limpieza masiva
    environment:
      AWS_REGION: ${self:provider.region}
      IMAGENES_CENTROS_BUCKET: spotly-centros-imagenes-${self:custom.stage}
      CANCHAS_TABLE_NAME: ${self:custom.commonEnvVars.CANCHAS_TABLE}
      CENTROS_TABLE_NAME: ${self:custom.commonEnvVars.CENTROS_DEPORTIVOS_TABLE}
    events:
      - schedule:
          rate: cron(0 3 1 * ? *) # Ejecuta el día 1 de cada mes a las 03:00 UTC
          enabled: true

resources:
  Resources:
    #======================================================================================#
    #=============================== API Gateway y Dominios ===============================#
    #======================================================================================#
    HttpApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: alquiler-canchas-api-${self:custom.stage}
        ProtocolType: HTTP
        CorsConfiguration:
          AllowHeaders:
            - Content-Type
            - Authorization
            - X-Amz-Date
            - X-Api-Key
            - X-Amz-Security-Token
          AllowMethods:
            - GET
            - POST
            - PUT
            - DELETE
            - OPTIONS
          AllowOrigins:
            - '*'
    # Autorizador de Cognito para API Gateway
    CognitoAuthorizer:
      Type: AWS::ApiGatewayV2::Authorizer
      Properties:
        ApiId: !Ref HttpApi
        AuthorizerType: JWT
        IdentitySource:
          - '$request.header.Authorization'
        JwtConfiguration:
          Audience:
            - !Ref CognitoUserPoolWebClient
            - !Ref CognitoUserPoolMobileClient
          Issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
        Name: CognitoAuthorizer
    # Dominio personalizado para API Gateway
    ApiGatewayDomainName:
      Type: AWS::ApiGatewayV2::DomainName
      Properties:
        DomainName: api.${self:custom.domain}
        DomainNameConfigurations:
          - EndpointType: REGIONAL
            CertificateArn: arn:aws:acm:us-east-1:237029655206:certificate/7c263b6e-d31c-48bd-bb3a-73933b7d5d6f
    # Mapeo de API Gateway al dominio personalizado
    ApiGatewayMapping:
      Type: AWS::ApiGatewayV2::ApiMapping
      DependsOn:
        - ApiGatewayDomainName
      Properties:
        DomainName: api.${self:custom.domain}
        ApiId: !Ref HttpApi
        Stage: $default
    # Registro DNS para el dominio API
    ApiDomainRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: Z027980929X1P0VZNXKFN # ID de tu zona existente
        Name: api.${self:custom.domain}
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt ApiGatewayDomainName.RegionalHostedZoneId
          DNSName: !GetAtt ApiGatewayDomainName.RegionalDomainName
    #======================================================================================#
    #================================Tablas DynamoDB=======================================#
    #======================================================================================#
    CentrosDeportivosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CentrosDeportivos${self:custom.tablePrefix}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: centroId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: horaAperturaMinima
            AttributeType: S
          - AttributeName: horaCierreMaxima
            AttributeType: S
        KeySchema:
          - AttributeName: centroId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: HoraAperturaMinimaIndex
            KeySchema:
              - AttributeName: horaAperturaMinima
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: HoraCierreMaximaIndex
            KeySchema:
              - AttributeName: horaCierreMaxima
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    CanchasTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Canchas${self:custom.tablePrefix}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: canchaId
            AttributeType: S
          - AttributeName: centroDeportivoId
            AttributeType: S
        KeySchema:
          - AttributeName: canchaId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CentroDeportivoIndex
            KeySchema:
              - AttributeName: centroDeportivoId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    ReservasTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Reservas${self:custom.tablePrefix}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: reservaId
            AttributeType: S
          - AttributeName: canchaId
            AttributeType: S
          - AttributeName: fecha
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: reservaId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CanchaFechaIndex
            KeySchema:
              - AttributeName: canchaId
                KeyType: HASH
              - AttributeName: fecha
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: CanchaIdIndex
            KeySchema:
              - AttributeName: canchaId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    HorariosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Horarios${self:custom.tablePrefix}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: horarioId
            AttributeType: S
          - AttributeName: canchaId
            AttributeType: S
          - AttributeName: fecha
            AttributeType: S
          - AttributeName: reservaId
            AttributeType: S
        KeySchema:
          - AttributeName: horarioId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CanchaFechaIndex
            KeySchema:
              - AttributeName: canchaId
                KeyType: HASH
              - AttributeName: fecha
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ReservaIdIndex
            KeySchema:
              - AttributeName: reservaId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    PagosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Pagos${self:custom.tablePrefix}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pagoId
            AttributeType: S
          - AttributeName: reservaId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: centroId
            AttributeType: S
          - AttributeName: braintreeTransactionId
            AttributeType: S
        KeySchema:
          - AttributeName: pagoId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ReservaIdIndex
            KeySchema:
              - AttributeName: reservaId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: CentroIdIndex
            KeySchema:
              - AttributeName: centroId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: TransactionIdIndex
            KeySchema:
              - AttributeName: braintreeTransactionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    # Tabla de Usuarios
    UsuariosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Usuarios${self:custom.tablePrefix}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId     
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: pendienteAprobacion
            AttributeType: S
        KeySchema:
          - AttributeName: userId     
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: PendienteAprobacionIndex
            KeySchema:
              - AttributeName: pendienteAprobacion
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    # Tabla para Reseñas
    ResenasTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: resenaId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: canchaId
            AttributeType: S
          - AttributeName: centroId
            AttributeType: S
          - AttributeName: userCanchaId
            AttributeType: S
          - AttributeName: userCentroId
            AttributeType: S
        KeySchema:
          - AttributeName: resenaId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: CanchaIdIndex
            KeySchema:
              - AttributeName: canchaId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: CentroIdIndex
            KeySchema:
              - AttributeName: centroId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UserCanchaIndex
            KeySchema:
              - AttributeName: userCanchaId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UserCentroIndex
            KeySchema:
              - AttributeName: userCentroId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    # Tabla para CuponDescuento
    CuponesDescuentoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CuponesDescuento${self:custom.tablePrefix}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: cuponId
            AttributeType: S
          - AttributeName: centroId
            AttributeType: S
          - AttributeName: codigo
            AttributeType: S
          - AttributeName: fechaFin
            AttributeType: S
        KeySchema:
          - AttributeName: cuponId
            KeyType: HASH
        GlobalSecondaryIndexes: 
          - IndexName: CentroIdCodigoIndex
            KeySchema:
              - AttributeName: centroId
                KeyType: HASH
              - AttributeName: codigo
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: CodigoIndex
            KeySchema:
              - AttributeName: codigo
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: FechaFinIndex
            KeySchema:
              - AttributeName: fechaFin
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    # === S3 para imágenes de centros deportivos ===
    ImagenesCentrosDeportivosBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: spotly-centros-imagenes-${self:custom.stage}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              MaxAge: 3000
    ImagenesCentrosDeportivosBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ImagenesCentrosDeportivosBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource: !Join ['', ['arn:aws:s3:::', !Ref ImagenesCentrosDeportivosBucket, '/*']]
    #======================================================================================#
    #====================================COGNITO==========================================#
    #======================================================================================#
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: alquiler-canchas-users-${self:custom.stage}
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        Schema:
          - Name: name
            Required: true
            Mutable: true
          - Name: role
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints:
              MaxLength: '256'
            DeveloperOnlyAttribute: false
          - Name: registration_source
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints:
              MaxLength: '256'
            DeveloperOnlyAttribute: false
          - Name: pendiente_aprobacion
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints:
              MaxLength: '256'
            DeveloperOnlyAttribute: false
          - Name: picture
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints:
              MaxLength: '2048'
            DeveloperOnlyAttribute: false
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        LambdaConfig:
          PreSignUp: !GetAtt CognitoPreSignUpFunction.Arn
          PostConfirmation: !GetAtt CognitoPostConfirmationFunction.Arn
          PreAuthentication: !Ref AWS::NoValue
          PostAuthentication: !GetAtt CognitoPostAuthenticationFunction.Arn
    # Definición de los grupos de usuarios usando variables
    SuperAdminGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: ${self:custom.cognitoGroups.superAdmin}
        Description: Grupo para super administradores del sistema
        UserPoolId: !Ref CognitoUserPool
        Precedence: 1
    AdminCentroGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: ${self:custom.cognitoGroups.adminCentro}
        Description: Grupo para administradores de centros deportivos
        UserPoolId: !Ref CognitoUserPool
        Precedence: 10
    ClienteGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: ${self:custom.cognitoGroups.cliente}
        Description: Grupo para clientes de la app móvil
        UserPoolId: !Ref CognitoUserPool
        Precedence: 20
    # Permisos para las funciones Lambda de Cognito
    CognitoPreSignUpPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt CognitoPreSignUpFunction.Arn
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn      
    CognitoPostConfirmationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt CognitoPostConfirmationFunction.Arn
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn  
    CognitoPostAuthenticationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt CognitoPostAuthenticationFunction.Arn
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn    
    # Dominio para la UI de Cognito
    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:custom.domain}-${self:custom.stage}
        UserPoolId: !Ref CognitoUserPool 
    # Identity Providers
    GoogleIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ProviderName: Google
        ProviderType: Google
        ProviderDetails:
          client_id: ${env:GOOGLE_CLIENT_ID}
          client_secret: ${env:GOOGLE_CLIENT_SECRET}
          authorize_scopes: "email profile openid"
        AttributeMapping:
          email: email
          name: name
          picture: picture
    FacebookIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ProviderName: Facebook
        ProviderType: Facebook
        ProviderDetails:
          client_id: ${env:FACEBOOK_CLIENT_ID}
          client_secret: ${env:FACEBOOK_CLIENT_SECRET}
          authorize_scopes: "email public_profile"
        AttributeMapping:
          email: email
          name: name
          picture: picture
    # Configuración base para clientes de Cognito
    CognitoUserPoolWebClient:
      Type: AWS::Cognito::UserPoolClient
      DependsOn:
        - GoogleIdentityProvider
        - FacebookIdentityProvider
      Properties:
        ClientName: web-admin-client
        UserPoolId: !Ref CognitoUserPool
        GenerateSecret: true
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_PASSWORD_AUTH
        SupportedIdentityProviders:
          - COGNITO
          - Google
          - Facebook
        CallbackURLs:
          - https://dashboard.${self:custom.domain}/callback
        LogoutURLs:
          - https://dashboard.${self:custom.domain}/logout
        AllowedOAuthFlows:
          - code
          - implicit
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        AllowedOAuthFlowsUserPoolClient: true
        PreventUserExistenceErrors: ENABLED
        TokenValidityUnits:
          AccessToken: hours
          IdToken: hours
          RefreshToken: days
        AccessTokenValidity: 8
        IdTokenValidity: 8
        RefreshTokenValidity: 30
        ReadAttributes:
          - email
          - name
          - picture
          - custom:role
          - custom:registration_source
          - custom:pendiente_aprobacion
        WriteAttributes:
          - email
          - name
          - picture
          - custom:role
          - custom:registration_source
          - custom:pendiente_aprobacion
    # App Client para Mobile con configuración específica
    CognitoUserPoolMobileClient:
      Type: AWS::Cognito::UserPoolClient
      DependsOn: 
        - GoogleIdentityProvider
        - FacebookIdentityProvider
      Properties:
        ClientName: react-native-mobile-client
        UserPoolId: !Ref CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_PASSWORD_AUTH
        SupportedIdentityProviders:
          - COGNITO
          - Google
          - Facebook
        CallbackURLs:
          - com.spotlyfrontreact://callback
        LogoutURLs:
          - com.spotlyfrontreact://logout
        AllowedOAuthFlows:
          - code
          - implicit
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        AllowedOAuthFlowsUserPoolClient: true
        PreventUserExistenceErrors: ENABLED
        TokenValidityUnits:
          AccessToken: hours
          IdToken: hours
          RefreshToken: days
        AccessTokenValidity: 24  # Diferente del Web Client
        IdTokenValidity: 24      # Diferente del Web Client
        RefreshTokenValidity: 30
        ReadAttributes:
          - email
          - name
          - picture
          - custom:role
          - custom:registration_source
          - custom:pendiente_aprobacion
        WriteAttributes:
          - email
          - name
          - picture
          - custom:role
          - custom:registration_source
          - custom:pendiente_aprobacion
    # Funciones Lambda con referencia reutilizable a variables de entorno
    CognitoPreSignUpFunction:
      Type: AWS::Lambda::Function
      Properties:
        Handler: src/cognito/preSignUp.handler
        Runtime: nodejs18.x
        Role: !GetAtt CognitoLambdaRole.Arn
        Environment:
          Variables:
            ADMIN_DOMAINS: ${self:custom.domain}
            COGNITO_WEB_CLIENT_ID: !Ref CognitoUserPoolWebClient
            COGNITO_MOBILE_CLIENT_ID: !Ref CognitoUserPoolMobileClient
    CognitoPostConfirmationFunction:
      Type: AWS::Lambda::Function
      Properties:
        Handler: src/cognito/postConfirmation.handler
        Runtime: nodejs18.x
        Role: !GetAtt CognitoLambdaRole.Arn
        Environment:
          Variables:
            USUARIOS_TABLE: Usuarios${self:custom.tablePrefix}
            COGNITO_USER_POOL_ID: !Ref CognitoUserPool
            SUPER_ADMIN_GROUP_NAME: ${self:custom.cognitoGroups.superAdmin}
            ADMIN_CENTRO_GROUP_NAME: ${self:custom.cognitoGroups.adminCentro}
            CLIENTE_GROUP_NAME: ${self:custom.cognitoGroups.cliente}
            COGNITO_WEB_CLIENT_ID: !Ref CognitoUserPoolWebClient
            COGNITO_MOBILE_CLIENT_ID: !Ref CognitoUserPoolMobileClient
    CognitoPostAuthenticationFunction:
      Type: AWS::Lambda::Function
      Properties:
        Handler: src/cognito/postAuthentication.handler
        Runtime: nodejs18.x
        Role: !GetAtt CognitoLambdaRole.Arn
        Environment:
          Variables:
            USUARIOS_TABLE: Usuarios${self:custom.tablePrefix}
    # Roles IAM optimizados
    CognitoLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: DynamoDBAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:DeleteItem
                    - dynamodb:UpdateItem
                    - dynamodb:GetItem
                  Resource: 
                    - !GetAtt UsuariosTable.Arn
                    - !Join ["", [!GetAtt UsuariosTable.Arn, "/index/*"]]
          - PolicyName: CognitoAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - cognito-idp:AdminAddUserToGroup
                    - cognito-idp:AdminRemoveUserFromGroup
                    - cognito-idp:AdminListGroupsForUser
                    - cognito-idp:AdminGetUser
                    - cognito-idp:ListUsers
                  Resource: !GetAtt CognitoUserPool.Arn
    AdminLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: DynamoDBAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:GetItem
                    - dynamodb:UpdateItem
                  Resource: !GetAtt UsuariosTable.Arn
          - PolicyName: CognitoAdminAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - cognito-idp:AdminAddUserToGroup
                    - cognito-idp:AdminGetUser
                  Resource: !GetAtt CognitoUserPool.Arn
    # SNS Topic para notificaciones
    NotificationsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-notifications-${self:custom.stage}
        DisplayName: Spotly Notifications
        KmsMasterKeyId: alias/aws/sns

    # Política de acceso para el topic
    NotificationsTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action:
                - sns:Publish
              Resource: !Ref NotificationsTopic
        Topics:
          - !Ref NotificationsTopic

    # Suscripción para notificaciones push (ejemplo)
    PushNotificationsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: application
        Endpoint: !GetAtt PushNotificationsEndpoint.Arn
        TopicArn: !Ref NotificationsTopic

    # Lambda para manejar notificaciones push
    PushNotificationsEndpoint:
      Type: AWS::Lambda::Function
      Properties:
        Handler: src/notifications/pushHandler.handler
        Runtime: nodejs18.x
        Role: !GetAtt NotificationsLambdaRole.Arn
        Environment:
          Variables:
            STAGE: ${self:custom.stage}
        Events:
          - SNS:
              TopicArn: !Ref NotificationsTopic

    # Rol IAM para la función Lambda de notificaciones
    NotificationsLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: SNSPublish
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource: !Ref NotificationsTopic

# Outputs para fácil referencia de recursos importantes
Outputs:
  UserPoolId:
    Value: !Ref CognitoUserPool
    Description: ID del Pool de Usuarios de Cognito
  WebClientId:
    Value: !Ref CognitoUserPoolWebClient
    Description: ID del cliente web para aplicación administrativa
  MobileClientId:
    Value: !Ref CognitoUserPoolMobileClient
    Description: ID del cliente móvil para aplicación React Native
  ApiEndpoint:
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com
    Description: URL de la API HTTP Gateway
  CustomDomainEndpoint:
    Value: !Sub https://api.${self:custom.domain}
    Description: URL personalizada para la API
  NotificationsTopicArn:
    Description: ARN del topic de SNS para notificaciones
    Value: !Ref NotificationsTopic
  NotificationsTopicName:
    Description: Nombre del topic de SNS para notificaciones
    Value: !GetAtt NotificationsTopic.TopicName